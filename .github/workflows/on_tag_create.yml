name: Deploy to Amazon ECS qa, setup prod job

on:
  push:
    tags:
      - 'v*'

env:
  AWS_REGION: us-east-1                   # set this to your preferred AWS region, e.g. us-west-1

jobs:
  build-qa-infra:
    name: Build qa Infrastructure
    runs-on: ubuntu-latest
    environment: 
      name: qa
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v2
          
      - name: Terraform Init
        env: 
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
          ENV_NAME: qa
        run: |
          cd application
          terraform init
      - name: Terraform Plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
          ENV_NAME: qa
        run: |
          cd application
          terraform workspace new $ENV_NAME || terraform workspace select $ENV_NAME
          terraform plan -var env_name=$ENV_NAME
      - name: Terraform Apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
          ENV_NAME: qa
        run: |
          cd application
          terraform workspace new $ENV_NAME || terraform workspace select $ENV_NAME
          terraform apply -auto-approve -var env_name=$ENV_NAME
  deploy-qa:
    needs: build-qa-infra
    name: Deploy
    runs-on: ubuntu-latest
    environment: 
      name: qa

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1.6.0

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REPOSITORY: cicd-poc
          ECS_SERVICE: cicd-poc-service-qa
          ECS_CLUSTER: cicd-poc-qa
          CONTAINER_NAME: cicd-poc
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_REF_NAME .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_REF_NAME
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_REF_NAME" >> $GITHUB_OUTPUT
      - name: Download task def
        id: get-task-def
        run: |
          aws ecs describe-task-definition --task-definition cicd_poc_task_definition-qa --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def-update
        env:
          ECR_REPOSITORY: cicd-poc
          ECS_SERVICE: cicd-poc-service-qa
          ECS_CLUSTER: cicd-poc-qa
          CONTAINER_NAME: cicd-poc
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        uses: aws-actions/amazon-ecs-render-task-definition@v1.1.3
        with:
          task-definition: task-definition.json
          container-name: cicd-poc
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        id: deploy-to-ecs
        env:
          ECR_REPOSITORY: cicd-poc
          ECS_SERVICE: cicd-poc-service-qa
          ECS_CLUSTER: cicd-poc-qa
          CONTAINER_NAME: cicd-poc
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1.4.11
        with:
          task-definition: ${{ steps.task-def-update.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
  build-production-infra:
    name: Build Prod Infrastructure
    runs-on: ubuntu-latest
    environment: 
      name: production
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v2
          
      - name: Terraform Init
        env: 
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
          ENV_NAME: production
        run: |
          cd application
          terraform init
      - name: Terraform Plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
          ENV_NAME: production
        run: |
          cd application
          terraform workspace new $ENV_NAME || terraform workspace select $ENV_NAME
          terraform plan -var env_name=$ENV_NAME
      - name: Terraform Apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
          ENV_NAME: production
        run: |
          cd application
          terraform workspace new $ENV_NAME || terraform workspace select $ENV_NAME
          terraform apply -auto-approve -var env_name=$ENV_NAME
  deploy-production:
    needs: build-production-infra
    name: Deploy
    runs-on: ubuntu-latest
    environment: 
      name: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1.6.0

      - name: Download task def
        id: get-task-def
        run: |
          aws ecs describe-task-definition --task-definition cicd_poc_task_definition-qa --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def-update
        env:
          ECR_REPOSITORY: cicd-poc
          ECS_SERVICE: cicd-poc-service-production
          ECS_CLUSTER: cicd-poc-production
          CONTAINER_NAME: cicd-poc
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        uses: aws-actions/amazon-ecs-render-task-definition@v1.1.3
        with:
          task-definition: task-definition.json
          container-name: cicd-poc
            #image: $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_REF_NAME
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.ref }}

      - name: Deploy Amazon ECS task definition
        id: deploy-to-ecs
        env:
          ECR_REPOSITORY: cicd-poc
          ECS_SERVICE: cicd-poc-service-production
          ECS_CLUSTER: cicd-poc-qa
          CONTAINER_NAME: cicd-poc
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1.4.11
        with:
          task-definition: ${{ steps.task-def-update.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
